package main

import (
	"context"
	"fmt"
	"log"
	"net/http"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/credentials"
	"github.com/aws/aws-sdk-go-v2/service/sns"
)

type C_monitor struct {
	s_url     string
	s_message string
	s_title   string
	i_rate    int
	s_region  string
	s_acid    string
	s_ackey   string
	s_session string
	cfg       aws.Config
}

func (t *C_monitor) Check_status(_s_url string, _i_rate int) {
	t.s_url = _s_url
	t.i_rate = _i_rate

	resp, err := http.Get(t.s_url)
	if err != nil {
		t.Send_alarm("Node01 Server Connection Fail", "Server Connection Fail")
		log.Fatal(err)
	}

	ticker := time.NewTicker(time.Second * time.Duration(t.i_rate))

	go func() {
		for time := range ticker.C {
			fmt.Println("HTTP Response Status:", resp.StatusCode, http.StatusText(resp.StatusCode))
			if resp.StatusCode >= 200 && resp.StatusCode <= 299 {
				fmt.Println("HTTP Status is in the 2xx range", time)
			} else {
				t.Send_alarm("Node01 HTTP Status Err", "HTTP Status Err")
				fmt.Println("Web Error", time)
			}
		}
	}()
	time.Sleep(time.Second * 5)
	ticker.Stop()
	fmt.Println("Ticker stopped")
}


func (t *C_monitor) Send_alarm() {
	

}


func (t *C_monitor) Init(_s_acid, _s_ackey, _s_session, _s_region string) {

	t.cfg = aws.Config{
		Region:      _s_region,
		Credentials: credentials.NewStaticCredentialsProvider(_s_acid, _s_ackey, _s_session),
	}
}

func (t *C_monitor) Send(_s_title, _s_message string) {

	client := sns.NewFromConfig(t.cfg)

	_, err := client.Publish(context.TODO(), &sns.PublishInput{
		Subject:  &_s_title,
		Message:  &_s_message,
		TopicArn: aws.String("arn:aws:sns:us-east-1:789520587610:send_errinfo"),
	})

	if err != nil {
		fmt.Println(err)
	}
}
